diff --git a/defs.h b/defs.h
index 5b15069..4d02e13 100644
--- a/defs.h
+++ b/defs.h
@@ -121,6 +121,9 @@ int             wait(void);
 void            wakeup(void*);
 void            yield(void);
 void            hello(void); // J.H.
+void            exit2(int status);
+int             wait2(int *status);
+int             waitpid(int pid, int *status, int options);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/proc.c b/proc.c
index 0fa2f80..af108bb 100644
--- a/proc.c
+++ b/proc.c
@@ -537,4 +537,135 @@ procdump(void)
 void
 hello(void) {
   cprintf("\n\n Hello from your kernel space! \n\n");
+}
+
+void
+exit2(int status)
+{
+  struct proc *curproc = myproc();
+  struct proc *p;
+  int fd;
+
+  curproc->exitStatus = status;
+
+  if(curproc == initproc)
+    panic("init exiting");
+
+  // Close all open files.
+  for(fd = 0; fd < NOFILE; fd++){
+    if(curproc->ofile[fd]){
+      fileclose(curproc->ofile[fd]);
+      curproc->ofile[fd] = 0;
+    }
+  }
+
+  begin_op();
+  iput(curproc->cwd);
+  end_op();
+  curproc->cwd = 0;
+
+  acquire(&ptable.lock);
+
+  // Parent might be sleeping in wait().
+  wakeup1(curproc->parent);
+
+  // Pass abandoned children to init.
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->parent == curproc){
+      p->parent = initproc;
+      if(p->state == ZOMBIE)
+        wakeup1(initproc);
+    }
+  }
+
+  // Jump into the scheduler, never to return.
+  curproc->state = ZOMBIE;
+  sched();
+  panic("zombie exit");
+}
+
+int
+wait2(int* status)
+{
+  struct proc *p;
+  int havekids, pid;
+  struct proc *curproc = myproc();
+  
+  acquire(&ptable.lock);
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      if(p->parent != curproc)
+        continue;
+      havekids = 1;
+      if(p->state == ZOMBIE){
+        *status = p->exitStatus;  
+        // Found one.
+        pid = p->pid;
+        kfree(p->kstack);
+        p->kstack = 0;
+        freevm(p->pgdir);
+        p->pid = 0;
+        p->parent = 0;
+        p->name[0] = 0;
+        p->killed = 0;
+        p->state = UNUSED;
+        release(&ptable.lock);
+        return pid;
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || curproc->killed){
+      release(&ptable.lock);
+      return -1;
+    }
+
+    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
+    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+  }
+}
+
+int
+waitpid(int pid, int* status, int options)
+{
+  struct proc *p;
+  int havekids;
+  struct proc *curproc = myproc();
+  
+  acquire(&ptable.lock);
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+      if(p->pid != pid)
+        continue;
+      havekids = 1;
+      if(p->state == ZOMBIE){
+        *status = p->exitStatus;  
+        // Found one.
+        pid = p->pid;
+        kfree(p->kstack);
+        p->kstack = 0;
+        freevm(p->pgdir);
+        p->pid = 0;
+        p->parent = 0;
+        p->name[0] = 0;
+        p->killed = 0;
+        p->state = UNUSED;
+        release(&ptable.lock);
+        return pid;
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || curproc->killed){
+      release(&ptable.lock);
+      return -1;
+    }
+
+    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
+    sleep(curproc, &ptable.lock);  //DOC: wait-sleep
+  }
 }
\ No newline at end of file
diff --git a/proc.h b/proc.h
index 1647114..2986be4 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int exitStatus;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index 1173d26..472d56f 100644
--- a/syscall.c
+++ b/syscall.c
@@ -104,6 +104,9 @@ extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_hello(void); // J.H.
+extern int sys_exit2(void);
+extern int sys_wait2(void);
+extern int sys_waitpid(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -128,6 +131,9 @@ static int (*syscalls[])(void) = {
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_hello]   sys_hello, // J.H.
+[SYS_exit2]   sys_exit2,
+[SYS_wait2]   sys_wait2,
+[SYS_waitpid] sys_waitpid,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index b1b0ad7..cce4728 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,4 +20,7 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
-#define SYS_hello  22  // J.H.
\ No newline at end of file
+#define SYS_hello  22  // J.H.
+#define SYS_exit2  23
+#define SYS_wait2  24
+#define SYS_waitpid 25
\ No newline at end of file
diff --git a/sysproc.c b/sysproc.c
index 0e038c0..195aa86 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -94,4 +94,41 @@ int
 sys_hello(void) {
   hello();
   return 0;
+}
+
+int sys_exit2(void){
+  int status;
+
+  if(argint(0, &status) < 0)
+    return -1;
+  exit2(status);
+
+  return 0;
+}
+
+int sys_wait2(void){
+  int *status;
+  if(argptr(0, (char**)&status, sizeof(status)) < 0)
+    return -1;
+  return wait2(status);
+  
+}
+
+int sys_waitpid(void){
+    int *status;
+    int pid;
+    int option;
+
+    if(argint(0, &pid) < 0)
+      return -1;
+ //&status => int **status
+
+ //char **status
+  if(argptr(1, (char**)&status, sizeof(status)) < 0)
+    return -1;
+
+  if(argint(2, &option) < 0)
+      return -1;
+
+  return waitpid(pid, status, option);
 }
\ No newline at end of file
diff --git a/test.c b/test.c
index ab9f787..e75fba6 100644
--- a/test.c
+++ b/test.c
@@ -1,9 +1,103 @@
 #include "types.h"
-#include "stat.h"
 #include "user.h"
 
-int main(int argc, char *argv[]){
-    //printf(1, "hello world\n");
-    hello(); // J.H.
-    exit();
-}
\ No newline at end of file
+#define WNOHANG 	1
+
+int main(int argc, char *argv[])
+{
+	
+	int exitWait(void);
+	int waitPid(void);
+
+  printf(1, "\n This program tests the correctness of your lab#1\n");
+  
+  if (atoi(argv[1]) == 1)
+	exitWait();
+  else if (atoi(argv[1]) == 2)
+	waitPid();
+  else 
+   printf(1, "\ntype \"%s 1\" to test exit and wait, \"%s 2\" to test waitpid\n", argv[0], argv[0]);
+  
+    // End of test
+	 exit();
+	 return 0;
+ }
+  
+int exitWait(void) {
+	  int pid, ret_pid, exit_status;
+    int i;
+  // use this part to test exit(int status) and wait(int* status)
+ 
+  printf(1, "\n  Parts a & b) testing exit(int status) and wait(int* status):\n");
+
+  for (i = 0; i < 2; i++) {
+    pid = fork();
+    if (pid == 0) { // only the child executed this code
+      if (i == 0){
+        printf(1, "\nThis is child with PID# %d and I will exit with status %d\n", getpid(), 0);
+        exit2(0);
+      }
+      else{
+	      printf(1, "\nThis is child with PID# %d and I will exit with status %d\n" ,getpid(), -1);
+        exit2(-1);
+      } 
+    } else if (pid > 0) { // only the parent executes this code
+      ret_pid = wait2(&exit_status);
+      printf(1, "\n This is the parent: child with PID# %d has exited with status %d\n", ret_pid, exit_status);
+    } else { // something went wrong with fork system call
+	    printf(2, "\nError using fork\n");
+      exit2(-1);
+    }
+  }
+  return 0;
+}
+
+int waitPid(void){
+	
+  int ret_pid, exit_status;
+  int i;
+  int pid_a[5]={0, 0, 0, 0, 0};
+ // use this part to test wait(int pid, int* status, int options)
+
+  printf(1, "\n  Part c) testing waitpid(int pid, int* status, int options):\n");
+
+	for (i = 0; i <5; i++) {
+		pid_a[i] = fork();
+		if (pid_a[i] == 0) { // only the child executed this code
+			printf(1, "\n This is child with PID# %d and I will exit with status %d\n", getpid(), getpid() + 4);
+			exit2(getpid() + 4);
+		}
+	}
+  sleep(5);
+  printf(1, "\n This is the parent: Now waiting for child with PID# %d\n",pid_a[3]);
+  ret_pid = waitpid(pid_a[3], &exit_status, 0);
+  printf(1, "\n This is the partent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[3] + 4);
+  sleep(5);
+  printf(1, "\n This is the parent: Now waiting for child with PID# %d\n",pid_a[1]);
+  ret_pid = waitpid(pid_a[1], &exit_status, 0);
+  printf(1, "\n This is the parent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[1] + 4);
+  sleep(5);
+  printf(1, "\n This is the parent: Now waiting for child with PID# %d\n",pid_a[2]);
+  ret_pid = waitpid(pid_a[2], &exit_status, 0);
+  printf(1, "\n This is the partent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[2] + 4);
+  sleep(5);
+  printf(1, "\n This is the parent: Now waiting for child with PID# %d\n",pid_a[0]);
+  ret_pid = waitpid(pid_a[0], &exit_status, 0);
+  printf(1, "\n This is the partent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[0] + 4);
+  sleep(5);
+  printf(1, "\n This is the parent: Now waiting for child with PID# %d\n",pid_a[4]);
+  ret_pid = waitpid(pid_a[4], &exit_status, 0);
+  printf(1, "\n This is the parent: Child# %d has exited with status %d, expected: %d\n",ret_pid, exit_status, pid_a[4] + 4);
+
+
+  printf(1, "\n This is the parent: Now try to wait for a invalid Number, this should not get stuck..\n");
+  ret_pid = waitpid(9999, &exit_status, 0);
+  printf(1, "\n This is the parent: Child# 9999 has ret code %d, expected: -1\n",ret_pid);
+  //printf(1, "\n This is the parent: Child# %d has exited with status %d\n",ret_pid, exit_status);
+
+  printf(1, "\n This is the parent: Now try to give invalid argument.\n");
+  ret_pid = waitpid(9999, (int*) 0xffffffff, 0);
+  printf(1, "\n This is the parent: Got ret code %d, expected: -1\n",ret_pid);
+
+  return 0;
+}
diff --git a/user.h b/user.h
index c342918..9b8e268 100644
--- a/user.h
+++ b/user.h
@@ -23,7 +23,10 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
-int hello(void); // J.H.
+int hello(int); // J.H.
+int exit2(int status);
+int wait2(int *status);
+int waitpid(int pid, int *status, int options);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 1691e39..a3d44d8 100644
--- a/usys.S
+++ b/usys.S
@@ -29,4 +29,7 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
-SYSCALL(hello) // J.H.
\ No newline at end of file
+SYSCALL(hello) // J.H.
+SYSCALL(exit2)
+SYSCALL(wait2)
+SYSCALL(waitpid)
\ No newline at end of file
